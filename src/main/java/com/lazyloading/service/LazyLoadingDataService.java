package com.lazyloading.service;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.lazyloading.domain.LazyLoading;
import com.lazyloading.repository.LazyLoadingRepository;
import com.lazyloading.util.FileUtil;

/**
 * This class manages the output file set of the Lazy Loading Process
 * @author Erika
 *
 */
@Service
public class LazyLoadingDataService {
	
	@Autowired
	LazyLoadingRepository lazyLoadingRepository;
	
	@Autowired
	public LazyDataProcessService lazyDaysService;
	
	public static final String DEFAULT_PREFIX = "lazy_loading_";
	public static final String DEFAULT_EXT = ".txt";
	public static final DateFormat DEFAULT_FORMAT = new SimpleDateFormat("yyyy-MM-dd-ss");
	public static final String DEFAULT_URL_HOST = "http://localhost:8080/";
	

	/**
	 * @return the files
	 */
	public List<LazyLoading> getLazyLoadingList() {
		List<LazyLoading> list = new ArrayList<>();
		
		for (LazyLoading data : lazyLoadingRepository.findAll()){
			list.add(data);
		}
		
		return list;
	}
	
	/**
	 * @param route
	 * @param date
	 * @param id
	 * @return
	 */
	public LazyLoading addLazyLoading(Date date, String id, String host){
		LazyLoading file = new LazyLoading(buildDefaultFileName(id, date), date, id, host);
		lazyLoadingRepository.save(file);
		return file;
	}

	/**
	 * Initialize the file name, using the prefix, date, id and default extension.
	 * <br/>
	 * The date is in dd-MM-yyyy-ss format. Example: <br/>
	 * lazy_loading_ID_date.txt
	 */
	public static String buildDefaultFileName(String userId, Date date){
		return DEFAULT_PREFIX + userId + "_" + DEFAULT_FORMAT.format(date) + DEFAULT_EXT;
	}
	
	/**
	 * Calculate the maximum Lazy Loading and save the results in the server
	 * @param lazyData
	 * @param userId
	 * @param serverUrl
	 * @param folder
	 * @return LazyLoading generated by the process
	 * @throws IOException
	 */
	public LazyLoading maximumLazyLoadingProcess(List<BigDecimal> lazyData, String userId, String serverUrl, String folder) 
			throws IOException{
		LazyLoading lazyResult = null;
		if (lazyDaysService.calculateLazyLoading(lazyData)){
        	
			lazyResult = addLazyLoading(new Date(), userId, serverUrl);
        	
        	FileUtil.saveDataToFile(lazyDaysService.toString(), folder, lazyResult.getFileName());

        	List<LazyLoading> findAll = getLazyLoadingList();
        	System.out.println(findAll);
        	
        }
		return lazyResult;
	}
	
}
